<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        const totalPages = '<%- totalPages  %>'
        let currentPage = 1;  // Start on the first page
        const orders = JSON.parse('<%- JSON.stringify(order) %>') || [];

        // Function to fetch orders for a specific page
        // Function to fetch orders for a specific page
        async function loadPage(page) {
            if (page < 1 || page > totalPages) return;  // Prevent out-of-bounds page numbers

            // Update currentPage
            currentPage = page;

            try {
                // Fetch the orders for the selected page
                const response = await fetch(`/order/history?page=${currentPage}`);

                // Ensure the response is valid
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                // Parse the response as JSON
                const data = await response.json();

                // Render orders
                renderOrders(data.orders);

                // Update page number and total pages
                document.getElementById("page-number").textContent = currentPage;
                document.getElementById("total-pages").textContent = data.totalPages;

                // Disable/Enable buttons based on the current page
                document.getElementById("prev-btn").disabled = currentPage === 1;
                document.getElementById("next-btn").disabled = currentPage === data.totalPages;

            } catch (error) {
                console.error("Error loading page:", error);
            }
        }

        // Function to format the timestamp in IST and calculate time difference
        function formatTimeDiff(placedAt) {
            if (!placedAt) return "N/A";

            const startTime = new Date(placedAt);
            const now = new Date();
            const diffMs = now - startTime;

            if (isNaN(diffMs)) return "N/A";

            const minutes = Math.floor(diffMs / 60000);
            const seconds = Math.floor((diffMs % 60000) / 1000);

            // Convert placedAt to IST using Intl.DateTimeFormat
            const options = {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                hour12: true,
            };

            const indianTime = new Intl.DateTimeFormat('en-IN', options).format(startTime);

            return `${indianTime}`;
        }

        // Function to render orders in a table
        function renderOrders(orderList) {
            const ordersTable = document.getElementById("orders-table-body");
            ordersTable.innerHTML = ""; // Clear the existing rows

            orderList.forEach((order) => {
                const row = document.createElement("tr");
                row.className = "bg-white border-b hover:bg-gray-50";

                row.innerHTML = `
                    <td class="px-4 py-2 text-center">${order.orderid}</td>
                    <td class="px-4 py-2 text-center">${order.table}</td>
                    <td class="px-4 py-2 text-center">${order.ordertype}</td>
                    <td class="px-4 py-2 text-center">${formatTimeDiff(order.placedAt)}</td>
                    <td class="px-4 py-2 text-center">${order.orderstatus}</td>
                    <td class="px-4 py-2 text-center">${order.ispaid ? "Yes" : "No"}</td>
                    <td class="px-4 py-2 text-center">â‚¹${order.total}</td>
                `;

                ordersTable.appendChild(row);
            });
        }

        // Function to apply filters
        function applyFilters() {
            const tableFilter = document.getElementById("filter-table").value;
            const typeFilter = document.getElementById("filter-ordertype").value;
            const statusFilter = document.getElementById("filter-orderstatus").value;
            const paymentFilter = document.getElementById("filter-paid").value;

            const filteredOrders = orders.filter(order => {
                return (
                    (!tableFilter || order.table == tableFilter) &&
                    (!typeFilter || order.ordertype === typeFilter) &&
                    (!statusFilter || order.orderstatus === statusFilter) &&
                    (!paymentFilter || String(order.ispaid) === paymentFilter)
                );
            });

            renderOrders(filteredOrders);
        }

        // Add event listeners to filters
        function addFilterListeners() {
            document.getElementById("filter-table").addEventListener("input", applyFilters);
            document.getElementById("filter-ordertype").addEventListener("change", applyFilters);
            document.getElementById("filter-orderstatus").addEventListener("change", applyFilters);
            document.getElementById("filter-paid").addEventListener("change", applyFilters);
        }

        // Initialize the page
        window.onload = () => {
            renderOrders(orders); // Render all orders initially
            addFilterListeners(); // Attach filter listeners
        };
        // Initialize by loading the first page
        //loadPage(1);
    </script>
</head>

<body class="bg-gray-100">

    <%- include('partials/top') %>
        <%- include('partials/headerForHistory') %>
            <div class="container mx-auto p-6">

                <!-- Filters -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div>
                        <label for="filter-table" class="block text-sm font-medium text-gray-700">Filter by
                            Table</label>
                        <input type="number" id="filter-table"
                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" placeholder="e.g., 1">
                    </div>
                    <div>
                        <label for="filter-ordertype" class="block text-sm font-medium text-gray-700">Filter by
                            Order
                            Type</label>
                        <select id="filter-ordertype" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                            <option value="">All</option>
                            <option value="dinning">Dinning</option>
                            <option value="takeaway">Takeaway</option>
                        </select>
                    </div>
                    <div>
                        <label for="filter-orderstatus" class="block text-sm font-medium text-gray-700">Filter by
                            Status</label>
                        <select id="filter-orderstatus" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                            <option value="">All</option>
                            <option value="completed">Completed</option>
                            <option value="placed">Placed</option>
                            <option value="canceled">Canceled</option>
                        </select>
                    </div>
                    <div>
                        <label for="filter-paid" class="block text-sm font-medium text-gray-700">Filter by
                            Payment</label>
                        <select id="filter-paid" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                            <option value="">All</option>
                            <option value="true">Paid</option>
                            <option value="false">Unpaid</option>
                        </select>
                    </div>
                </div>

                <!-- Orders Table -->
                <div class="overflow-x-auto">
                    <table class="min-w-full table-auto bg-white shadow-lg rounded-lg">
                        <thead class="bg-gray-200 text-gray-700">
                            <tr>
                                <th class="px-4 py-2 text-center">Order ID</th>
                                <th class="px-4 py-2 text-center">Table</th>
                                <th class="px-4 py-2 text-center">Order Type</th>
                                <th class="px-4 py-2 text-center">Order Placed At</th>
                                <th class="px-4 py-2 text-center">Order Status</th>
                                <th class="px-4 py-2 text-center">Paid</th>
                                <th class="px-4 py-2 text-center">Total</th>
                            </tr>
                        </thead>
                        <tbody id="orders-table-body" class="text-gray-700">
                            <!-- Orders will be dynamically rendered here -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                 <!-- 
                <div class="flex justify-between items-center mt-6">
                    <button id="prev-btn" class="px-4 py-2 bg-blue-500 text-white rounded"
                        onclick="loadPage(currentPage - 1)" disabled>
                        Previous Page
                    </button>
                    <span class="text-lg font-medium">Page <span id="page-number">
                            <%= currentPage %>
                        </span> of <span id="total-pages">
                            <%= totalPages %>
                        </span></span>
                    <button id="next-btn" class="px-4 py-2 bg-blue-500 text-white rounded"
                        onclick="loadPage(currentPage+1)">Next Page</button>
                </div>
                -->
            </div>

</body>

</html>